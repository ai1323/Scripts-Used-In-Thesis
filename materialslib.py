import numpy as np 
from ase import Atoms 
from scipy.interpolate import interp1d
from kpm.evaltool import eval_ase
import os
from kpm.units import eV




class Materials:
    def __init__(self,cells=None,eps1=None,eps2=None,SK_dict={}):
        self.cells=[eval_ase(cells[i]) for i in range(len(cells))]
        if not (not eps1):
            self.epsw=[eps1[i]+eps2[i]*1j for i in range(len(eps1))]
        else:
            #Iterate over the materials in the shape
            self.epsw=None
        self.omega=None 
        eVlist=np.array([eV]*23+[1.0])

        self.SK_dict={key: np.array(value) *eVlist for key, value in SK_dict.items()}
        #self.SK_dict = {key: value / 13.6 for key, value in .items()}
    def set_omega(self,omega):
        self.omega=omega
        if not self.epsw:
            self.epsw=[]
            for cell in self.cells:
                symbol=cell.symbols[0]
                if os.path.exists(symbol+"_eps_data.txt"):
                    data=np.loadtxt(symbol+"_eps_data.txt")
                    x=data[:,0]
                    y=data[:,1]+1j*data[:,2]
                    f=interp1d(x,y)
                    self.epsw.append(f([self.omega])[0])
                else:
                    f=get_default_material_data(symbol,"Permitivity_interpolator")
                    self.epsw.append(f([self.omega])[0])

    def set_SK(self):
        pass




def get_default_material_data(material_name,parameter):
    """
    material_name: the name of the materials, e.g. Au, Ag, Cu
    parameter: what data you want? Permitivity_interpolator? SK_list? 
    """
    match material_name:
        case "Au":
            match parameter:
                case "Permitivity_interpolator":
                    x=np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.1, 2.2, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.2, 6.4, 6.6, 6.8, 7.0, 7.2, 7.4, 7.6, 7.8, 8.0, 8.2, 8.4, 8.6, 8.8, 9.0, 9.2, 9.4, 9.6, 9.8, 10.0])
                    y=np.array([(-6794.06+1353.4422j), (-1736.856+177.7698j), (-772.9723+55.0836j), (-433.5408+24.5794j), (-275.74+12.9558j), (-189.81+7.7168j), (-138.0141+5.17j), (-104.2117+3.6756j), (-81.1576+2.703j), (-64.464+2.0878j), (-42.7616+1.308j), (-29.5872+0.8704j), (-20.7872+0.7296j), (-14.5843+0.6876j), (-9.9687+0.8216j), (-8.0332+1.0224j), (-6.394+1.2192j), (-3.2096+1.86j), (-1.8557+2.6076j), (-0.834+3.8192j), (-0.9135+4.9192j), (-1.0013+5.1684j), (-0.9541+5.37j), (-0.8684+5.544j), (-0.9045+5.5748j), (-0.8684+5.544j), (-0.7659+5.518j), (-0.664+5.4912j), (-0.4965+5.4668j), (-0.3685+5.6052j), (-0.3729+5.74j), (-0.5472+5.8354j), (-0.748+5.7558j), (-0.8736+5.611j), (-0.924+5.4058j), (-0.978+5.2688j), (-1.0304+5.133j), (-1.1095+4.9632j), (-1.2051+4.698j), (-1.1661+4.394j), (-1.0767+4.1656j), (-0.9656+3.975j), (-0.8587+3.7884j), (-0.7317+3.6356j), (-0.4959+3.388j), (-0.3048+3.2186j), (-0.1488+3.0734j), (0.0241+2.904j), (0.1888+2.7816j), (0.3495+2.7032j), (0.46+2.625j), (0.5928+2.5654j), (0.7491+2.522j), (0.8931+2.546j), (0.9471+2.584j), (0.9828+2.6496j), (0.944+2.7048j), (0.8424+2.673j), (0.7945+2.5152j), (0.8436+2.392j), (0.8979+2.314j), (0.9417+2.3056j), (0.9765+2.2532j), (1.0011+2.158j), (1.06+2.1222j), (1.1605+2.0748j), (1.2412+2.1216j), (1.2528+2.1646j), (1.2369+2.192j)])
                    return interp1d(x,y)
                case "SK_list":
                    pass
        case "Ag":
            match parameter:
                case "Permitivity_interpolator":
                    x=np.array([0.1, 0.2, 0.3, 0.4, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.25, 3.5, 3.6, 3.77, 3.8, 3.9, 4.0, 4.1, 4.2, 4.3, 4.5, 4.75, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 9.0, 10.0])
                    y=np.array([(-8050.4648+1789.1514j), (-2080.4244+259.576j), (-928.872+86.0382j), (-523.124+41.6598j), (-335.1735+24.5488j), (-81.4625+5.0568j), (-33.4512+3.1266j), (-17.3995+2.2572j), (-9.4905+1.4832j), (-5.1+1.0442j), (-3.4067+0.8556j), (-1.9723+0.5964j), (-1.224+0.5198j), (0.1209+0.424j), (0.4429+0.438j), (1.5604+0.936j), (2.2321+1.932j), (2.2704+2.941j), (1.9389+3.71j), (1.716+3.9098j), (1.2177+4.3264j), (0.7965+4.3148j), (0.5529+4.216j), (0.3069+3.886j), (0.1572+3.4304j), (0.1701+2.95j), (0.2688+2.5016j), (0.4715+2.0748j), (0.7831+1.74j), (1.4553+1.4896j), (1.818+1.6352j)])
                    return interp1d(x,y)
                case "SK_list":
                    pass

        case "Cu":
            match parameter:
                case "Permitivity_interpolator":
                    x=np.array([0.1, 0.5, 1.0, 1.5, 1.7, 1.75, 1.8, 1.85, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.6, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8, 5.0, 5.2, 5.4, 5.6, 5.8, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 11.0, 12.0, 13.0, 14.0, 14.5, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0])
                    y=np.array([(-4240.7688+4249.8266j), (-307.8928+60.2946j), (-71.7168+7.4624j), (-27.6+2.7352j), (-19.5765+1.9492j), (-18.0184+1.785j), (-16.2775+1.6968j), (-14.7741+1.694j), (-13.4248+1.5414j), (-10.4247+1.7496j), (-7.6752+2.6414j), (-6.0711+4.316j), (-5.6265+5.3872j), (-5.5056+5.824j), (-4.9275+5.75j), (-4.2007+5.5224j), (-3.4917+5.2156j), (-2.772+5.0922j), (-2.1896+4.953j), (-1.7808+4.8994j), (-1.4805+4.8508j), (-1.1628+4.6096j), (-0.6732+4.6576j), (-0.4695+4.8872j), (-0.4785+5.0768j), (-0.5832+5.2326j), (-1.0075+5.2332j), (-1.3356+4.968j), (-1.53+4.5568j), (-1.6352+4.1064j), (-1.5789+3.674j), (-1.4465+3.3072j), (-0.9553+2.6304j), (-0.4991+2.328j), (-0.1881+2.18j), 2.1218j, (0.1005+2.0188j), (0.2145+1.8952j), (0.304+1.7922j), (0.4092+1.7056j), (0.5824+1.605j), (0.6552+1.5914j), (0.648+1.5552j), (0.6052+1.5264j), (0.5425+1.4832j), (0.516+1.4342j), (0.4536+1.273j), (0.4437+1.1284j), (0.4785+0.9968j), (0.5143+0.8976j), (0.5719+0.792j), (0.6419+0.738j), (0.702+0.6992j), (0.7467+0.6956j), (0.7847+0.7104j), (0.7616+0.768j), (0.6864+0.736j), (0.63+0.6688j), (0.6171+0.602j), (0.6325+0.51j), (0.672+0.4472j)])
                    return interp1d(x,y)
                case "SK_list":
                    pass
    