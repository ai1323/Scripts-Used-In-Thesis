#!/usr/bin/python python

import json
def main(shape="TouchedSphere",shape_kwargs={},materials_kwargs={},Hamiltonian_file="Hamiltonian.npz",#Guilding the nanoparticle, If hamiltonian is built as npz, can be imported
        calculation="HCG",construct_ase_nanoparticle_kwargs={"materials":["Atoms(\"Au\")","Atoms(\"Ag\")"],},#Decide the mode of calculation
        source="automatic",#Tell what material we want, do we want to import it from other files?
        calculator="KPM",phi_calculator="comsol",compute_phi_kwargs={},Phi_file="Phi.npz",#Decide what calculator we should use, e.g. KPM, exact, 
        A=0.0,B=100.0,NNR=5000,Nbatch=1,Nk=100,omega=2.4,seednumber=0,#Args for KPM
        save_mumn=False,save_h=False,save_Phi=False,save_atom=False,
        Nx=5000,Ny=5000,Ef=0.0,T=300,sigma=0.06,gamma=0.05,#Args for compute HCG
        I0=1e9,n=1.0,plotting=True,plt_xlim=(-5.0,5.0),
        max_time=255600.0
        #please put energy unit in eV, and length unit in Angstrom. 
        ):
    
    
    import os 
    import numpy as np
    from kpm.units import eV
    from kpm.shapelib import TouchedSphere,Sphere
    from kpm.superformula import Superformula3D
    shapedict={"TouchedSphere":TouchedSphere,"Sphere":Sphere,"Superformula3D":Superformula3D}
    ActualShape=shapedict[shape](**shape_kwargs)
    from kpm.materialslib import Materials 
    materials=Materials(**materials_kwargs)
    materials.set_omega(omega)
    #Convert A and B to Hartree, the Hamiltonian will get converted in the construct Hamiltonian code. 
    A*=eV 
    B*=eV 
    #I have do the potential*Angstrom in the read comsol output file. 

    from kpm.builder import construct_ase_nanoparticle, construct_Hamiltonian,spd_hopping,spd_onsite
    from ase.io import write 
    import matplotlib.pyplot as plt
    if calculation=="HCG":
        """
        Calculate NP 
        Use NP to calculate Hamiltonian 
        Use NP to calculate Phi
        use Hamiltonian and Phi to calculate HCG
        """
        NP_calculation=True
        Hamiltonian_calculation=True
        Phi_calculation=True
        if os.path.isfile("compute_mumn_warning_backup.txt"):
            os.replace("compute_mumn_warning_backup.txt","compute_mumn_warning.txt")
        if os.path.isfile("compute_mumn_warning.txt"):
            Continued_calculation=True
            with open("compute_mumn_warning.txt","r") as f:
                kstart=int(f.readline().split(":")[1])
            
            os.replace("compute_mumn_warning.txt","compute_mumn_warning_backup.txt")
        else:
            Continued_calculation=False
            kstart=0

    
        
    if calculation=="Phi":
        """
        Calculate NP 
        Use NP to calculate Phi
        """
        NP_calculation=True
        Phi_calculation=True 
        Hamiltonian_calculation=False


    elif calculation=="DOS":
        """
        Calculate NP 
        Use NP to calculate Hamiltonian 
        use Hamiltonian to calculate DOS
        """
        NP_calculation=True
        Hamiltonian_calculation=True
        Phi_calculation=False 

    if NP_calculation==True: 
        ase_nanoparticle=construct_ase_nanoparticle(ActualShape,materials,**construct_ase_nanoparticle_kwargs)
        positions=ase_nanoparticle.get_positions()
        if save_atom:
            from ase import io 
            io.write("ase_nanoparticle.xyz",ase_nanoparticle)
    
    if Phi_calculation==True:
        if phi_calculator=="comsol":
            phiidx,phijidx,phivalue=ActualShape.compute_phi(positions,materials,**compute_phi_kwargs)
        if save_Phi:
            np.savez("Phi.npz",phiiidx=phiidx,phijidx=phijidx,phivalue=phivalue)
    if Hamiltonian_calculation==True:
        natoms=positions.shape[0]
        estimated_memory=natoms*9*16*(NNR*2+500)
        print("Storing the random vectors requires {}GB of memory".format(estimated_memory/1073741824))
        hiidx,hjidx,hvalue=construct_Hamiltonian(ase_nanoparticle,materials,hopping_model=spd_hopping,onsite_model=spd_onsite,A=A,B=B)
        if save_h:
            np.savez("hamiltonian.npz",hiidx=hiidx,hjidx=hjidx,hvalue=hvalue)
    
    if calculation=="Phi":
        """
        After phi calculation, Phi was automaitcally saved if necessary. 
        """
        pass
    if calculation=="HCG":
        from kpm.KPM import compute_mumn
        print("The maximum allowed time for calculation is {}".format(max_time))
        mumn=compute_mumn(hiidx,hjidx,hvalue,phiidx,phijidx,phivalue,NNR,Nbatch,Nk,seed_number=seednumber,max_time=float(max_time),kstart=kstart).real
        if save_mumn:
            np.save("mumn.npy",mumn)
        from kpm.postprocessing import compute_eh_list 
        beta=1/(3.166811563e-6*T)
        gamma*=eV
        sigma*=eV
        omega*=eV
        Ef*=eV
        Ej, Nelist, Nhlist=compute_eh_list(mumn,Nx,Ny,omega,A,B,Ef,beta,gamma)
        Ngrid=int(round(5*sigma/(Ej[1]-Ej[0])))
        ker_x=np.arange(-Ngrid,Ngrid)*(Ej[1]-Ej[0])
        ker_y=1/np.sqrt(2*np.pi*sigma**2)*np.exp(-ker_x**2/2/sigma**2)
        #from scipy.signal import convolve 
        Nelist=np.convolve(ker_y,Nelist,mode="same")*(Ej[1]-Ej[0])
        Nhlist=np.convolve(ker_y,Nhlist,mode="same")*(Ej[1]-Ej[0])
        from kpm.units import unit_change
        Nelist=unit_change(Nelist,I0,natoms,n)
        Nhlist=unit_change(Nhlist,I0,natoms,n)
        ans=np.zeros([Nelist.shape[0],3])
        ans[:,0]=(Ej-Ef)/eV
        ans[:,1]=Nelist *eV 
        ans[:,2]=Nhlist*eV
        if Continued_calculation:
            ans2=np.loadtxt("HCG_result.txt")
            if os.path.isfile("compute_mumn_warning.txt"):
                with open("compute_mumn_warning.txt","r") as g:
                    Nk=int(g.readline().split(":")[1])
                    os.remove("compute_mumn_warning_backup.txt")
            weight2=kstart/Nk
            weight1=1-weight2
            ans=ans*weight1+ans2*weight2
            if os.path.isfile("compute_mumn_warning_backup.txt"):
                os.remove("compute_mumn_warning_backup.txt")
        np.savetxt("HCG_result.txt",ans,
                   header="E-Ef                    # Ne                    # Nh                      ")
        if plotting:
            plt.plot(ans[:,0],ans[:,1],"b-")
            plt.plot(ans[:,0],ans[:,2],"r-")
            plt.xlabel(r"$E-E_f$ (eV)")
            plt.ylabel(r"$N_{e/h}$ (-)")
            plt.xlim(plt_xlim)
            plt.savefig("HCG_result.png")
        
    elif calculation=="DOS":
        from kpm.dos import compute_mun 
        mun=compute_mun(hiidx,hjidx,hvalue,NNR,Nk,seed_number=seednumber)
        from kpm.postprocessing import compute_dos
        Ef*=eV
        e,de=compute_dos(mun.real,A,B,sigma=sigma*eV,num_points=Nx)
        ans=np.zeros([e.shape[0],2])
        ans[:,0]=(e-Ef)/eV 
        ans[:,1]=de*eV 
        np.savetxt("DOS_result.txt",ans,
                   header="E-Ef                    # Ne                    # Nh                      ")
        if plotting:
            plt.plot(ans[:,0],ans[:,1],"b-")
            plt.xlabel(r"$E-E_f$ (eV)")
            plt.ylabel(r"$D(E-E_f)$")
            plt.xlim(plt_xlim)
            plt.savefig("HCG_result.png")
    


with open("input.json") as f:
    kwargs=json.load(f)
main(**kwargs)
